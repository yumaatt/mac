- name: install taps of homebrew
  homebrew_tap: tap="{{ item }}" state=present
  with_items: homebrew_taps

- name: update homebrew
  homebrew: update_homebrew=yes

- name: install homebrew packages
  homebrew: name="{{ item.name }}" state="{{ item.state|default('latest') }}" install_options="{{ item.install_options|default() }}"
  with_items: homebrew_packages

- name: create makeinfo symlink for emacs flycheck
  file: src=/usr/local/Cellar/texinfo/6.0/bin/makeinfo dest=/usr/local/bin/makeinfo state=link
  become: yes

- name: install homebrew cask packages
  homebrew_cask: name="{{ item }}" state=present
  with_items: homebrew_cask_packages

- name: install dotfiles
  git: repo=https://github.com/yumaatt/dotfiles.git dest=~/.ghq/github.com/yumaatt/dotfiles update=no

- name: setup dotfiles
  command: ~/.ghq/github.com/yumaatt/dotfiles/setup.sh
  changed_when: false

- name: add /usr/local/bin/zsh to /etc/shells
  copy: >
    src=shells    
    dest=/etc/shells
    owner=root
    group=wheel
    mode=0644
  become: yes

- name: change default shell
  command: chsh -s {{ item.shell }} {{ item.user }}
  with_items: default_shell
  become: yes
  changed_when: false

- name: install anyenv
  git: repo=https://github.com/riywo/anyenv dest=~/.anyenv update=no

- name: anyenv plugins directory
  file: path=~/.anyenv/plugins state=directory mode=0775

- name: anyenv plugins
  git: repo=https://github.com/znz/{{ item }}.git dest=~/.anyenv/plugins/{{ item }} update=no
  with_items: anyenv_plugins

- name: anyenv envs directory
  file: path=~/.anyenv/envs state=directory mode=0775

- name: anyenv install envs
  command: creates=~/.anyenv/envs/{{ item }} ~/.anyenv/bin/anyenv install {{ item }}
  with_items: anyenv

- name: install python
  command: creates=~/.anyenv/envs/pyenv/versions/{{ item }} ~/.anyenv/envs/pyenv/bin/pyenv install {{ item }}
  with_items: python_versions

- name: check python version
  shell: cat ~/.anyenv/envs/pyenv/version
  changed_when: false
  ignore_errors: yes
  register: pyenv_python_version

- name: set python version
  command: ~/.anyenv/envs/pyenv/bin/pyenv global {{ python_version }}
  when: pyenv_python_version is defined and pyenv_python_version.stdout != '{{ python_version }}'

- name: install ruby
  command: creates=~/.anyenv/envs/rbenv/versions/{{ item }} ~/.anyenv/envs/rbenv/bin/rbenv install {{ item }}
  with_items: ruby_versions

- name: check ruby version
  shell: cat ~/.anyenv/envs/rbenv/version
  changed_when: false
  ignore_errors: yes
  register: rbenv_ruby_version

- name: set ruby version
  command: ~/.anyenv/envs/rbenv/bin/rbenv global {{ ruby_version }}
  when: rbenv_ruby_version is defined and rbenv_ruby_version.stdout != '{{ ruby_version }}'

- name: install perl
  command: creates=~/.anyenv/envs/plenv/versions/{{ item }} ~/.anyenv/envs/plenv/bin/plenv install {{ item }}
  with_items: perl_versions

- name: check perl version
  shell: cat ~/.anyenv/envs/plenv/version
  changed_when: false
  ignore_errors: yes
  register: plenv_perl_version

- name: set perl version
  command: ~/.anyenv/envs/plenv/bin/plenv global {{ perl_version }}
  when: plenv_perl_version is defined and plenv_perl_version.stdout != '{{ perl_version }}'

- name: install nodejs
  command: creates=~/.anyenv/envs/ndenv/versions/{{ item }} ~/.anyenv/envs/ndenv/bin/ndenv install {{ item }}
  with_items: nodejs_versions

- name: check nodejs version
  shell: cat ~/.anyenv/envs/ndenv/version
  changed_when: false
  ignore_errors: yes
  register: ndenv_nodejs_version

- name: set nodejs version
  command: ~/.anyenv/envs/ndenv/bin/ndenv global {{ nodejs_version }}
  when: ndenv_nodejs_version is defined and ndenv_nodejs_version.stdout != '{{ nodejs_version }}'

- name: install go
  command: creates=~/.anyenv/envs/goenv/versions/{{ item }} ~/.anyenv/envs/goenv/bin/goenv install {{ item }}
  with_items: go_versions

- name: check go version
  shell: cat ~/.anyenv/envs/goenv/version
  changed_when: false
  ignore_errors: yes
  register: goenv_go_version

- name: set go version
  command: ~/.anyenv/envs/goenv/bin/goenv global {{ go_version }}
  when: goenv_go_version is defined and goenv_go_version.stdout != '{{ go_version }}'

- name: install bundler
  gem: name=bundler executable=~/.anyenv/envs/rbenv/shims/gem user_install=no

- name: install cpanm
  command: creates=~/.anyenv/envs/plenv/shims/cpanm ~/.anyenv/envs/plenv/bin/plenv install-cpanm

- name: cpanm Carton
  command: creates=~/.anyenv/envs/plenv/shims/carton ~/.anyenv/envs/plenv/shims/cpanm Carton

- name: install ghq
  command: creates=~/.go/bin/ghq go get github.com/motemen/ghq

- name: ghq get repo
  command: creates=~/.ghq/github.com/{{ item.user }}/{{ item.repo }} ghq get https://github.com/{{ item.user }}/{{ item.repo }}.git
  with_items: ghq_repos
